@page "/ChatTest"
@inject ChatModel ChatModel
@inject AllPatterns AllPatterns
@inject IModalService Modal
@implements IDisposable
<h3>chatTest</h3>


<div class="container-fluid">
    <ul>
        @foreach (var chat in AllPatterns._ChatMessage)
        {
            <li class="list-group-item text-left">@chat</li>
        }
    </ul>
</div>
<div class="card mb-4">
    <div class="card-body">
        <p class="card-text">
            <code>
                @("Modal.Show<Confirm>(\"Welcome to Blazored Modal\", options);")
            </code>
        </p>
    </div>
</div>
<button @onclick="ShowModal" class="btn btn-primary">Show Modal</button>

@functions {
    private System.Timers.Timer _timer;
    private long lastMaxOffset;

    protected override async Task OnInitializedAsync()
    {
        ChatModel.OnChange += StateHasChanged;
        int currentCount = 0;
        Console.WriteLine("Test");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _timer = new System.Timers.Timer(2000);

            _timer.Elapsed += async (s, e) =>
            {
                await ChatModel.StartReadFile(AllPatterns);
                await InvokeAsync(StateHasChanged);
            };
            _timer.Enabled = true;
        }
    }

    void ShowModal() => Modal.Show<Confirm>("Welcome to Blazored Modal");

    public void Dispose()
    {
        _timer.Enabled = false;
        ChatModel.OnChange -= StateHasChanged;
        ChatModel.PageActive = false;
    }
}
